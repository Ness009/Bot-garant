import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "8128924301"))

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

class AppealStates(StatesGroup):
    waiting_for_text = State()

class ComplaintStates(StatesGroup):
    waiting_for_text = State()

class GiftStates(StatesGroup):
    waiting_for_text = State()

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì© –ü–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é", callback_data="appeal")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É", callback_data="complaint")],
        [InlineKeyboardButton(text="üéÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data="gift")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "appeal")
async def handle_appeal(callback_query: types.CallbackQuery):
    await AppealStates.waiting_for_text.set()
    await bot.send_message(callback_query.from_user.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∞–ø–µ–ª–ª—è—Ü–∏–∏.")

@dp.message_handler(state=AppealStates.waiting_for_text)
async def receive_appeal(message: types.Message, state: FSMContext):
    await bot.send_message(ADMIN_ID, f"üì© <b>–ù–æ–≤–∞—è –∞–ø–µ–ª–ª—è—Ü–∏—è</b> –æ—Ç @{message.from_user.username or message.from_user.id}:

{message.text}")
    await message.answer("‚úÖ –í–∞—à–∞ –∞–ø–µ–ª–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "complaint")
async def handle_complaint(callback_query: types.CallbackQuery):
    await ComplaintStates.waiting_for_text.set()
    await bot.send_message(callback_query.from_user.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã.")

@dp.message_handler(state=ComplaintStates.waiting_for_text)
async def receive_complaint(message: types.Message, state: FSMContext):
    await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è <b>–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞</b> –æ—Ç @{message.from_user.username or message.from_user.id}:

{message.text}")
    await message.answer("‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "gift")
async def handle_gift(callback_query: types.CallbackQuery):
    await GiftStates.waiting_for_text.set()
    await bot.send_message(callback_query.from_user.id, "üéÅ –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–æ–¥–∞—Ä–æ–∫.")

@dp.message_handler(state=GiftStates.waiting_for_text)
async def receive_gift(message: types.Message, state: FSMContext):
    await bot.send_message(ADMIN_ID, f"üéÅ <b>–ü–æ–¥–∞—Ä–æ–∫</b> –æ—Ç @{message.from_user.username or message.from_user.id}:

{message.text}")
    await message.answer("‚úÖ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    await state.finish()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
